//// [tests/cases/compiler/inferTypePredicateImplicit.ts] ////

=== inferTypePredicateImplicit.ts ===
function isNonNull(x: number | null) {
>isNonNull : Symbol(isNonNull, Decl(inferTypePredicateImplicit.ts, 0, 0))
>x : Symbol(x, Decl(inferTypePredicateImplicit.ts, 0, 19))

  const ok = x !== null;
>ok : Symbol(ok, Decl(inferTypePredicateImplicit.ts, 1, 7))
>x : Symbol(x, Decl(inferTypePredicateImplicit.ts, 0, 19))

  return ok;
>ok : Symbol(ok, Decl(inferTypePredicateImplicit.ts, 1, 7))
}

declare let tNN: number | null;
>tNN : Symbol(tNN, Decl(inferTypePredicateImplicit.ts, 5, 11))

if (isNonNull(tNN)) {
>isNonNull : Symbol(isNonNull, Decl(inferTypePredicateImplicit.ts, 0, 0))
>tNN : Symbol(tNN, Decl(inferTypePredicateImplicit.ts, 5, 11))

  let t: number = tNN;
>t : Symbol(t, Decl(inferTypePredicateImplicit.ts, 7, 5))
>tNN : Symbol(tNN, Decl(inferTypePredicateImplicit.ts, 5, 11))
}

// Should not infer a type predicate for this function.
// true return => x is string, but false return !=> x is number
function flakyIsString(x: string | number) {
>flakyIsString : Symbol(flakyIsString, Decl(inferTypePredicateImplicit.ts, 8, 1))
>x : Symbol(x, Decl(inferTypePredicateImplicit.ts, 12, 23))

  return typeof x === 'string' && Math.random() > 0.5;
>x : Symbol(x, Decl(inferTypePredicateImplicit.ts, 12, 23))
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
}

function isNonNullExplicit(x: number | null) {
>isNonNullExplicit : Symbol(isNonNullExplicit, Decl(inferTypePredicateImplicit.ts, 14, 1))
>x : Symbol(x, Decl(inferTypePredicateImplicit.ts, 16, 27))

  const ok = x !== null;
>ok : Symbol(ok, Decl(inferTypePredicateImplicit.ts, 17, 7))
>x : Symbol(x, Decl(inferTypePredicateImplicit.ts, 16, 27))

  if (ok) {
>ok : Symbol(ok, Decl(inferTypePredicateImplicit.ts, 17, 7))

    let t: number = x;
>t : Symbol(t, Decl(inferTypePredicateImplicit.ts, 19, 7))
>x : Symbol(x, Decl(inferTypePredicateImplicit.ts, 16, 27))
  }
  return ok;
>ok : Symbol(ok, Decl(inferTypePredicateImplicit.ts, 17, 7))
}

