//// [tests/cases/compiler/inferTypePredicateArrow.ts] ////

=== inferTypePredicateArrow.ts ===
// https://github.com/microsoft/TypeScript/issues/16069

const numsOrNull = [1, 2, 3, 4, null];
>numsOrNull : Symbol(numsOrNull, Decl(inferTypePredicateArrow.ts, 2, 5))

const filteredNums = numsOrNull.filter(x => !!x);
>filteredNums : Symbol(filteredNums, Decl(inferTypePredicateArrow.ts, 3, 5))
>numsOrNull.filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>numsOrNull : Symbol(numsOrNull, Decl(inferTypePredicateArrow.ts, 2, 5))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 3, 39))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 3, 39))

const evenSquaresInline: number[] =
>evenSquaresInline : Symbol(evenSquaresInline, Decl(inferTypePredicateArrow.ts, 5, 5))

    [1, 2, 3, 4]
>[1, 2, 3, 4]        .map(x => x % 2 === 0 ? x * x : null)        .filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>[1, 2, 3, 4]        .map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))

        .map(x => x % 2 === 0 ? x * x : null)
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 7, 13))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 7, 13))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 7, 13))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 7, 13))

        .filter(x => !!x);
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 8, 16))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 8, 16))

// const isTruthy = (x: number | null) => { return !!x; };
const isTruthy = (x: number | null) => !!x;
>isTruthy : Symbol(isTruthy, Decl(inferTypePredicateArrow.ts, 11, 5))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 11, 18))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 11, 18))

const evenSquares: number[] =
>evenSquares : Symbol(evenSquares, Decl(inferTypePredicateArrow.ts, 13, 5))

    [1, 2, 3, 4]
>[1, 2, 3, 4]    .map(x => x % 2 === 0 ? x * x : null)      .filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>[1, 2, 3, 4]    .map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))

    .map(x => x % 2 === 0 ? x * x : null)
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 15, 9))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 15, 9))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 15, 9))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 15, 9))

      .filter(isTruthy);
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isTruthy : Symbol(isTruthy, Decl(inferTypePredicateArrow.ts, 11, 5))

const evenSquaresNonNull: number[] =
>evenSquaresNonNull : Symbol(evenSquaresNonNull, Decl(inferTypePredicateArrow.ts, 18, 5))

    [1, 2, 3, 4]
>[1, 2, 3, 4]    .map(x => x % 2 === 0 ? x * x : null)    .filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>[1, 2, 3, 4]    .map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))

    .map(x => x % 2 === 0 ? x * x : null)
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 20, 9))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 20, 9))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 20, 9))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 20, 9))

    .filter(x => x !== null);
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 21, 12))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 21, 12))

// Type guards can flow between functions
const myGuard = (o: string | undefined): o is string => !!o;
>myGuard : Symbol(myGuard, Decl(inferTypePredicateArrow.ts, 24, 5))
>o : Symbol(o, Decl(inferTypePredicateArrow.ts, 24, 17))
>o : Symbol(o, Decl(inferTypePredicateArrow.ts, 24, 17))
>o : Symbol(o, Decl(inferTypePredicateArrow.ts, 24, 17))

const mySecondGuard = (o: string | undefined) => myGuard(o);
>mySecondGuard : Symbol(mySecondGuard, Decl(inferTypePredicateArrow.ts, 25, 5))
>o : Symbol(o, Decl(inferTypePredicateArrow.ts, 25, 23))
>myGuard : Symbol(myGuard, Decl(inferTypePredicateArrow.ts, 24, 5))
>o : Symbol(o, Decl(inferTypePredicateArrow.ts, 25, 23))

// https://github.com/microsoft/TypeScript/issues/16069#issuecomment-1327449914
type MyObj = { data?: string };
>MyObj : Symbol(MyObj, Decl(inferTypePredicateArrow.ts, 25, 60))
>data : Symbol(data, Decl(inferTypePredicateArrow.ts, 28, 14))

type MyArray = { list?: MyObj[] }[];
>MyArray : Symbol(MyArray, Decl(inferTypePredicateArrow.ts, 28, 31))
>list : Symbol(list, Decl(inferTypePredicateArrow.ts, 29, 16))
>MyObj : Symbol(MyObj, Decl(inferTypePredicateArrow.ts, 25, 60))

const myArray: MyArray = [];
>myArray : Symbol(myArray, Decl(inferTypePredicateArrow.ts, 30, 5))
>MyArray : Symbol(MyArray, Decl(inferTypePredicateArrow.ts, 28, 31))

const result = myArray
>result : Symbol(result, Decl(inferTypePredicateArrow.ts, 32, 5))
>myArray  .map((arr) => arr.list)  .filter((arr) => arr && arr.length)  .map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>myArray  .map((arr) => arr.list)  .filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>myArray  .map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>myArray : Symbol(myArray, Decl(inferTypePredicateArrow.ts, 30, 5))

  .map((arr) => arr.list)
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>arr : Symbol(arr, Decl(inferTypePredicateArrow.ts, 33, 8))
>arr.list : Symbol(list, Decl(inferTypePredicateArrow.ts, 29, 16))
>arr : Symbol(arr, Decl(inferTypePredicateArrow.ts, 33, 8))
>list : Symbol(list, Decl(inferTypePredicateArrow.ts, 29, 16))

  .filter((arr) => arr && arr.length)
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>arr : Symbol(arr, Decl(inferTypePredicateArrow.ts, 34, 11))
>arr : Symbol(arr, Decl(inferTypePredicateArrow.ts, 34, 11))
>arr.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
>arr : Symbol(arr, Decl(inferTypePredicateArrow.ts, 34, 11))
>length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))

  .map((arr) => arr
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>arr : Symbol(arr, Decl(inferTypePredicateArrow.ts, 35, 8))
>arr//              ^^^ Object is possibly 'undefined'.    .filter((obj) => obj && obj.data)    .map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>arr//              ^^^ Object is possibly 'undefined'.    .filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>arr : Symbol(arr, Decl(inferTypePredicateArrow.ts, 35, 8))

//              ^^^ Object is possibly 'undefined'.
    .filter((obj) => obj && obj.data)
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>obj : Symbol(obj, Decl(inferTypePredicateArrow.ts, 37, 13))
>obj : Symbol(obj, Decl(inferTypePredicateArrow.ts, 37, 13))
>obj.data : Symbol(data, Decl(inferTypePredicateArrow.ts, 28, 14))
>obj : Symbol(obj, Decl(inferTypePredicateArrow.ts, 37, 13))
>data : Symbol(data, Decl(inferTypePredicateArrow.ts, 28, 14))

    .map(obj => JSON.parse(obj.data))
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>obj : Symbol(obj, Decl(inferTypePredicateArrow.ts, 38, 9))
>JSON.parse : Symbol(JSON.parse, Decl(lib.es5.d.ts, --, --))
>JSON : Symbol(JSON, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>parse : Symbol(JSON.parse, Decl(lib.es5.d.ts, --, --))
>obj.data : Symbol(data, Decl(inferTypePredicateArrow.ts, 28, 14))
>obj : Symbol(obj, Decl(inferTypePredicateArrow.ts, 38, 9))
>data : Symbol(data, Decl(inferTypePredicateArrow.ts, 28, 14))

//                         ^^^^^^^^ Type 'undefined' is not assignable to type 'string'.
  );

// https://github.com/microsoft/TypeScript/issues/16069#issuecomment-1335186481

// https://github.com/microsoft/TypeScript/issues/16069#issuecomment-1183547889
type Foo = {
>Foo : Symbol(Foo, Decl(inferTypePredicateArrow.ts, 40, 4))

  foo: string;
>foo : Symbol(foo, Decl(inferTypePredicateArrow.ts, 45, 12))
}
type Bar = Foo & {
>Bar : Symbol(Bar, Decl(inferTypePredicateArrow.ts, 47, 1))
>Foo : Symbol(Foo, Decl(inferTypePredicateArrow.ts, 40, 4))

  bar: string;
>bar : Symbol(bar, Decl(inferTypePredicateArrow.ts, 48, 18))
}

const list: (Foo | Bar)[] = [];
>list : Symbol(list, Decl(inferTypePredicateArrow.ts, 52, 5))
>Foo : Symbol(Foo, Decl(inferTypePredicateArrow.ts, 40, 4))
>Bar : Symbol(Bar, Decl(inferTypePredicateArrow.ts, 47, 1))

const resultBar = list.filter((value) => 'bar' in value);
>resultBar : Symbol(resultBar, Decl(inferTypePredicateArrow.ts, 53, 5))
>list.filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>list : Symbol(list, Decl(inferTypePredicateArrow.ts, 52, 5))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>value : Symbol(value, Decl(inferTypePredicateArrow.ts, 53, 31))
>value : Symbol(value, Decl(inferTypePredicateArrow.ts, 53, 31))

// result type should be `Bar[]`

// https://github.com/microsoft/TypeScript/issues/38390#issuecomment-626019466
// Ryan's example:
const a = [1, "foo", 2, "bar"].filter(x => typeof x === "string");
>a : Symbol(a, Decl(inferTypePredicateArrow.ts, 58, 5))
>[1, "foo", 2, "bar"].filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 58, 38))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 58, 38))

// Currently legal
a.push(10);
>a.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(inferTypePredicateArrow.ts, 58, 5))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))

// Defer to explicit type guards, even when they're incorrect.
function backwardsGuard(x: number|string): x is number {
>backwardsGuard : Symbol(backwardsGuard, Decl(inferTypePredicateArrow.ts, 60, 11))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 63, 24))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 63, 24))

  return typeof x === 'string';
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 63, 24))
}

// Partition tests. The "false" case matters.
declare function partition<T, R extends T>(
>partition : Symbol(partition, Decl(inferTypePredicateArrow.ts, 65, 1))
>T : Symbol(T, Decl(inferTypePredicateArrow.ts, 68, 27))
>R : Symbol(R, Decl(inferTypePredicateArrow.ts, 68, 29))
>T : Symbol(T, Decl(inferTypePredicateArrow.ts, 68, 27))

  els: T[], pred: (x: T) => x is R
>els : Symbol(els, Decl(inferTypePredicateArrow.ts, 68, 43))
>T : Symbol(T, Decl(inferTypePredicateArrow.ts, 68, 27))
>pred : Symbol(pred, Decl(inferTypePredicateArrow.ts, 69, 11))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 69, 19))
>T : Symbol(T, Decl(inferTypePredicateArrow.ts, 68, 27))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 69, 19))
>R : Symbol(R, Decl(inferTypePredicateArrow.ts, 68, 29))

): [R[], Exclude<T, R>[]];
>R : Symbol(R, Decl(inferTypePredicateArrow.ts, 68, 29))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(inferTypePredicateArrow.ts, 68, 27))
>R : Symbol(R, Decl(inferTypePredicateArrow.ts, 68, 29))

function isString(x: string | number) {
>isString : Symbol(isString, Decl(inferTypePredicateArrow.ts, 70, 26))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 72, 18))

  return typeof x === 'string';
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 72, 18))
}

declare let strsOrNums: (string|number)[];
>strsOrNums : Symbol(strsOrNums, Decl(inferTypePredicateArrow.ts, 76, 11))

const [strs1, nums1] = partition(strsOrNums, isString); // nums1 should be number[]
>strs1 : Symbol(strs1, Decl(inferTypePredicateArrow.ts, 77, 7))
>nums1 : Symbol(nums1, Decl(inferTypePredicateArrow.ts, 77, 13))
>partition : Symbol(partition, Decl(inferTypePredicateArrow.ts, 65, 1))
>strsOrNums : Symbol(strsOrNums, Decl(inferTypePredicateArrow.ts, 76, 11))
>isString : Symbol(isString, Decl(inferTypePredicateArrow.ts, 70, 26))

function flakyIsString(x: string | number) {
>flakyIsString : Symbol(flakyIsString, Decl(inferTypePredicateArrow.ts, 77, 55))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 79, 23))

  return typeof x === 'string' && Math.random() > 0.5;
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 79, 23))
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
}
const [strs2, nums2] = partition(strsOrNums, flakyIsString); // nums2 should be (string|number)[]
>strs2 : Symbol(strs2, Decl(inferTypePredicateArrow.ts, 82, 7))
>nums2 : Symbol(nums2, Decl(inferTypePredicateArrow.ts, 82, 13))
>partition : Symbol(partition, Decl(inferTypePredicateArrow.ts, 65, 1))
>strsOrNums : Symbol(strsOrNums, Decl(inferTypePredicateArrow.ts, 76, 11))
>flakyIsString : Symbol(flakyIsString, Decl(inferTypePredicateArrow.ts, 77, 55))

function isDate(x: object): x is Date {
>isDate : Symbol(isDate, Decl(inferTypePredicateArrow.ts, 82, 60))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 84, 16))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 84, 16))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

  return x instanceof Date;
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 84, 16))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))
}
function flakyIsDate(x: object): x is Date {
>flakyIsDate : Symbol(flakyIsDate, Decl(inferTypePredicateArrow.ts, 86, 1))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 87, 21))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 87, 21))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

  return x instanceof Date;
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 87, 21))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))
}

declare let maybeDates: object[];
>maybeDates : Symbol(maybeDates, Decl(inferTypePredicateArrow.ts, 91, 11))

const [dates1, objs1] = partition(maybeDates, isDate); // should be [Date[], object[]]
>dates1 : Symbol(dates1, Decl(inferTypePredicateArrow.ts, 92, 7))
>objs1 : Symbol(objs1, Decl(inferTypePredicateArrow.ts, 92, 14))
>partition : Symbol(partition, Decl(inferTypePredicateArrow.ts, 65, 1))
>maybeDates : Symbol(maybeDates, Decl(inferTypePredicateArrow.ts, 91, 11))
>isDate : Symbol(isDate, Decl(inferTypePredicateArrow.ts, 82, 60))

const [dates2, objs2] = partition(maybeDates, flakyIsDate); // should be [Date[], object[]]
>dates2 : Symbol(dates2, Decl(inferTypePredicateArrow.ts, 93, 7))
>objs2 : Symbol(objs2, Decl(inferTypePredicateArrow.ts, 93, 14))
>partition : Symbol(partition, Decl(inferTypePredicateArrow.ts, 65, 1))
>maybeDates : Symbol(maybeDates, Decl(inferTypePredicateArrow.ts, 91, 11))
>flakyIsDate : Symbol(flakyIsDate, Decl(inferTypePredicateArrow.ts, 86, 1))

// This should not infer a type guard since the value on which we do the refinement
// is not related to the original parameter.
function irrelevantIsNumber(x: string | number) {
>irrelevantIsNumber : Symbol(irrelevantIsNumber, Decl(inferTypePredicateArrow.ts, 93, 59))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 97, 28))

	x = Math.random() < 0.5 ? "string" : 123;
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 97, 28))
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

  return typeof x === 'string';
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 97, 28))
}

// We shouldn't infer a type guard for either param because of the negative case.
function areBothNums(x: string|number, y: string|number) {
>areBothNums : Symbol(areBothNums, Decl(inferTypePredicateArrow.ts, 100, 1))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 103, 21))
>y : Symbol(y, Decl(inferTypePredicateArrow.ts, 103, 38))

  return typeof x === 'number' && typeof y === 'number';
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 103, 21))
>y : Symbol(y, Decl(inferTypePredicateArrow.ts, 103, 38))
}

// It would be valid to infer a type guard for this function, but it would require some
// unification across the two return statements.
function doubleReturn(x: string|number) {
>doubleReturn : Symbol(doubleReturn, Decl(inferTypePredicateArrow.ts, 105, 1))
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 109, 22))

  if (typeof x === 'string') {
>x : Symbol(x, Decl(inferTypePredicateArrow.ts, 109, 22))

    return true;
  }
  return false;
}

function guardsOneButNotOthers(a: string|number, b: string|number, c: string|number) {
>guardsOneButNotOthers : Symbol(guardsOneButNotOthers, Decl(inferTypePredicateArrow.ts, 114, 1))
>a : Symbol(a, Decl(inferTypePredicateArrow.ts, 116, 31))
>b : Symbol(b, Decl(inferTypePredicateArrow.ts, 116, 48))
>c : Symbol(c, Decl(inferTypePredicateArrow.ts, 116, 66))

  return typeof b === 'string';
>b : Symbol(b, Decl(inferTypePredicateArrow.ts, 116, 48))
}

